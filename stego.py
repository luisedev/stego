# -*- coding: utf-8 -*-
"""
Automatically generated by Colaboratory.
# **Stegoanálisis**
## **Importación de dependencias**
"""

import cv2
import numpy as np
import matplotlib.pyplot as plt
try:
  import bitstring
except ModuleNotFoundError:
  !pip install bitstring
  import bitstring

"""## **Métodos para la extracción de mensajes**

### Extracción de valores por filas (x), columnas (y) y canales --> i, j, k
"""

def extract_message(img):
  bits = ''
  rows, columns, channels = img.shape

  for i in range(rows):
    for j in range(columns):
      for k in range(channels):
        b_ch = bitstring.BitArray(uint = img[i,j,k], length = 8)
        value = 1 if b_ch[-1] == True else 0
        bits += str(value)
  
  bits_msg = bitstring.BitArray(bin = bits)
  rescued_msg = ''
  for byte in bits_msg.bytes:
        rescued_msg += chr(byte)

  return rescued_msg

"""### Extracción de valores por filas y columnas en un canal determinado """

def extract_message_from_channel(img,channel):
  bits = ''
  rows, columns, channels = img.shape

  for i in range(rows):
    for j in range(columns):
      b_ch = bitstring.BitArray(uint = img[i,j,channel], length = 8)
      value = 1 if b_ch[-1] == True else 0
      bits += str(value)
  
  bits_msg = bitstring.BitArray(bin = bits)
  rescued_msg = ''
  for byte in bits_msg.bytes:
      if byte > 31 and byte < 126:
        rescued_msg += chr(byte)

  return rescued_msg

"""### Extracción de valores en escala de grises"""

def extract_message_from_gray_scale(img):
  bits = ''
  rows, columns = img.shape

  for i in range(rows):
    for j in range(columns):
      b_ch = bitstring.BitArray(uint = img[i,j], length = 8)
      value = 1 if b_ch[-1] == True else 0
      bits += str(value)
  
  bits_msg = bitstring.BitArray(bin = bits)
  rescued_msg = ''
  for byte in bits_msg.bytes:
    rescued_msg += chr(byte)
  return rescued_msg

"""### Extracción de valores por columnas"""

def extract_message_from_columns(img):
  bits = ''
  rows, columns, channels = img.shape

  for i in range(columns):
    for j in range(rows):
      for k in range(channels):
        b_ch = bitstring.BitArray(uint = img[j,i,k], length = 8)
        value = 1 if b_ch[-1] == True else 0
        bits += str(value)
  
  bits_msg = bitstring.BitArray(bin = bits)
  rescued_msg = ''
  for byte in bits_msg.bytes:
      rescued_msg += chr(byte)



  return rescued_msg

"""# **Método para el análisis visual**


"""

# Establecemos valores para LSB=1 y LSB=0
from PIL import Image

def visual_attack(filename):
  height = Image.open( filename ).height
  width = Image.open( filename ).width

  print('Height: ' + str(height))
  print ('Width: ' + str(width) )

  img = cv2.imread(filename)
  img = cv2.cvtColor(img, cv2.COLOR_RGB2BGR)

  rows, columns, channels = img.shape

  for i in range(rows):
    for j in range(columns):
      for k in range(channels):
        if img[i,j,k] % 2 == 0: # LSB es 0
          img[i,j,k] = 255
        elif img[i,j,k] % 2 == 1: # LSB es 1
          img[i,j,k] = 0

  plt.imshow(img)
  plt.show()

"""# **Resultados de análisis visual**"""

#print('Imagen 1:')
#visual_attack('imagen_1.tiff')

#print('Imagen 2:')
#visual_attack('imagen_2.tiff')

print('Imagen 3:')
visual_attack('imagen_3.tiff')

"""### Método de análisis visual visto en clase"""

def visual_attack_stego(filename):
  pixels = cv2.imread(filename)
  pixels = cv2.cvtColor(pixels, cv2.COLOR_RGB2BGR)
  height, width,_ = pixels.shape
  for y in range(height):
    for x in range(width):
      r=g=b=0
      if pixels[x,y][0] % 2 == 1:
        r = 0
      else:
        r = 255
      if pixels[x,y][1] % 2 == 1:
        g = 0
      else:
        g = 255
      if pixels[x,y][2] % 2 == 1:
        b = 0
      else:
        b = 255
      pixels[x,y] = (r,g,b)

  plt.imshow(pixels)
  plt.show()

"""Resultados del análisis visual visto en clase"""

#visual_attack_stego('imagen_1.tiff')
#visual_attack_stego('imagen_2.tiff')
visual_attack_stego('imagen_3.tiff')

"""# **Imagen extraida vs imagen 2**"""

#Imagen extraida del documento pdf del enunciado
visual_attack('extraida.jpg')
#Imagen a estegoanalizar
visual_attack('imagen_2.tiff')

"""# **Solución imagen 1**"""

img = cv2.imread('imagen_1.tiff')
img = cv2.cvtColor(img, cv2.COLOR_RGB2BGR)

rescued_msg = extract_message(img)
plt.imshow(img)
print('Message:')
print(rescued_msg)

img = cv2.imread('imagen_2.tiff',0)
plt.imshow(img, cmap='gray')
print(img.shape)
plt.show()

rescued_msg = extract_message_from_gray_scale(img)

print('Message:')
print(rescued_msg)

"""# **Solución imagen 2**"""

# Recorremos la imagen calculando el histograma
filename = 'imagen_3.tiff'
pixels = cv2.imread(filename)

pixels = cv2.cvtColor(pixels, cv2.COLOR_BGR2GRAY)
height, width = pixels.shape

histogram = [0]*255
for y in range(height):
  for x in range(width):
    cur_pixel = pixels[x, y]
    histogram[cur_pixel]+=1

# Restamos las parejas de barras
total=0
for y in range(1, len(histogram), 2):
  dif=abs(histogram[y-1]-histogram[y])
  total+=dif

print('--------------------')
print('\nTOTAL = '+str(total) +'\n')
print('--------------------')

"""# **Solución imagen 3**"""

img = cv2.imread('imagen_3.tiff')
img = cv2.cvtColor(img, cv2.COLOR_RGB2BGR)
print('Shape'+ str(img.shape))
rescued_msg = extract_message_from_columns(img)
plt.imshow(img)
print('Message:')
print(rescued_msg)

"""# **Escondiendo un mensaje**"""

def hide_message(img, message):
  message += '@'
  bytes_msg = bytes(message, 'utf-8')


  b = bitstring.BitArray(bytes = bytes_msg)

  rows, columns, channels = img.shape
  img_copied = np.copy(img)

  msg_len = len(b)
  msg_indx = 0

  for i in range(rows):
    for j in range(columns):
      for k in range(channels):
        b_ch = bitstring.BitArray(uint = img_copied[i,j,k], length = 8)
        b_ch.set(b[msg_indx], -1)
        img_copied[i,j,k] = b_ch.uint
       
        if msg_indx == msg_len - 1:
          break

        msg_indx += 1

  return img_copied

"""# **Extrayendo el mensaje**"""

def extract_my_message(img):
  bits = ''
  rows, columns, channels = img.shape

  for i in range(rows):
    for j in range(columns):
      for k in range(channels):
        b_ch = bitstring.BitArray(uint = img[i,j,k], length = 8)
        value = 1 if b_ch[-1] == True else 0
        bits += str(value)
  
  bits_msg = bitstring.BitArray(bin = bits)
  rescued_msg = ''
  for byte in bits_msg.bytes:
      if byte > 31 and byte < 126:
        rescued_msg += chr(byte)

  rescued_msg = rescued_msg[:rescued_msg.find('@')]

  return rescued_msg

img = cv2.imread('imagen_1.tiff')  
img2 = hide_message(img, ':)')

rescued = extract_my_message(img2)
print(rescued)

print('Imagen 1:')
visual_attack('cactus.png')
